Metadata-Version: 2.4
Name: wjecexampaperprocessor
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: json-repair>=0.41.0
Requires-Dist: mistralai>=1.6.0
Requires-Dist: openai>=1.76.2
Requires-Dist: pymongo[srv]>=4.12.1
Requires-Dist: pytest>=8.3.5
Requires-Dist: python-dotenv>=1.1.0
Requires-Dist: tqdm>=4.67.1

# WJEC Exam Paper Processor

## Project Overview

The WJEC Exam Paper Processor is a specialised tool designed to automate the extraction, processing, and analysis of Welsh Joint Education Committee (WJEC) examination papers. This tool helps educators, assessment designers, and educational researchers work more efficiently with exam content by automating metadata extraction and content organization.

## Key Features

- Automated extraction of exam paper metadata (titles, questions, marks, etc.)
- Structured organization of exam content for easier analysis
- Support for various WJEC exam formats across different subject areas
- Tools for comparing exam content across years and specifications
- Export capabilities for further analysis in other systems
- Unified index management system for organizing and relating exam documents
- Hierarchical document structure generation for better content navigation
- Extraction and structuring of questions and mark schemes into machine-readable format
- MongoDB integration for efficient document storage and retrieval

## Getting Started

### Prerequisites

- Python 3.8 or higher
- Mistral AI API key
- MongoDB instance (local or cloud-based)

### Installation

1. Clone the repository:

   ```bash
   git clone https://github.com/yourusername/examPapersInMarkdown.git
   cd examPapersInMarkdown
   ```

2. Install the required packages:

   ```bash
   pip install mistralai pymongo python-dotenv
   ```

3. Set up environment variables:

   ```bash
   export MISTRAL_API_KEY="your-api-key"
   export MONGODB_URI="mongodb://localhost:27017"
   export MONGODB_DATABASE_NAME="wjec_exams"
   export SOURCE_FOLDER="source_pdfs"
   ```

   For Windows:

   ```powershell
   set MISTRAL_API_KEY=your-api-key
   set MONGODB_URI=mongodb://localhost:27017
   set MONGODB_DATABASE_NAME=wjec_exams
   set SOURCE_FOLDER=source_pdfs
   ```

4. Create the required directories:

   ```bash
   mkdir -p source_pdfs Index
   ```

## Metadata Extraction

The system extracts crucial metadata from WJEC exam papers including:

- Paper code and reference numbers
- Subject and qualification information
- Date and session information
- Question structure and mark allocation
- Content domain coverage

This metadata enables efficient searching, categorisation and analysis of exam papers.

## Usage

### Using the Unified Command Line Interface

The project provides a unified command line interface through `main.py` that serves as a single entry point for all functionality:

```bash
python main.py <command> [options]
```

Available commands:

- `ocr`: Run the OCR processing pipeline with MongoDB storage
- `metadata`: Extract metadata from OCR results
- `index`: Manage, transform, and enhance the document index
- `exam-content`: Parse and extract structured question and mark scheme data

Each command has its own set of options. Use `--help` with any command to see available options:

```bash
python main.py ocr --help
python main.py metadata --help
python main.py index --help
python main.py exam-content --help
```

#### Examples

**OCR Processing:**

```bash
python main.py ocr --source /path/to/pdfs --api-key YOUR_MISTRAL_API_KEY --mongodb-uri mongodb://localhost:27017
```

**Metadata Extraction:**

```bash
python main.py metadata --file path/to/ocr_file.json --api-key YOUR_MISTRAL_API_KEY
```

or

```bash
python main.py metadata --directory ocr_results --pattern "*.json" --api-key YOUR_MISTRAL_API_KEY
```

**Index Management:**

```bash
python main.py index --input Index/index.json --output Index/hierarchical_index.json
```

**Exam Content Parsing:**

```bash
# Test the parser on the first valid exam with both question paper and mark scheme
python main.py exam-content test

# Test with a specific exam ID
python main.py exam-content test --exam-id "1500U30-1-110618"

# Process multiple exams with filtering
python main.py exam-content process --subject "Computer Science" --year 2018 --skip-processed

# Process exams with a specific qualification and limit the number processed
python main.py exam-content process --qualification "AS-Level" --limit 5 --continue-on-error

# Process a single exam by its ID
python main.py exam-content process-single 2500U10-1-040618

# Advanced options with custom paths and logging
python main.py exam-content process --subject "Computer Science" --logs-dir ./logs --log-level DEBUG
```

### OCR Processing

1. Place your PDF files in the `source_pdfs` directory.

2. Run the OCR processing command:

   ```bash
   python main.py ocr
   ```

3. The OCR results will be stored in MongoDB using a hybrid storage approach:
   - PDF files are stored in GridFS
   - OCR JSON results are stored inline if small (<5MB) or in GridFS if large
   - Images are stored inline if small (<500KB) or in GridFS if large

4. To use the OCR results for metadata extraction or exam content parsing, simply refer to the document IDs returned by the OCR process.

### Index Management

The system includes a powerful index management system that organizes exam documents, identifies relationships between question papers and mark schemes, and generates a hierarchical structure for easier navigation.

1. To process and transform your document index in a single step:

   ```bash
   python -m src.IndexManager.main
   ```

2. Command-line options:

   ```
   usage: main.py [-h] [--input INPUT] [--output OUTPUT] [--non-interactive] [--update-only] [--transform-only] [--enhance-only] [--skip-metadata]

   Manage, transform, and enhance exam document index

   options:
     -h, --help         show this help message and exit
     --input INPUT      Path to input flat index file (default: Index/index.json)
     --output OUTPUT    Path for output hierarchical index file (default: Index/hierarchical_index.json)
     --non-interactive  Run in non-interactive mode (automatically select first option for conflicts)
     --update-only      Only update unit numbers and relationships (skip transformation and enhancement)
     --transform-only   Only transform the structure (skip enhancement)
     --enhance-only     Only enhance existing hierarchical structure (skip updating and transformation)
     --skip-metadata    Skip enhancing the structure with document metadata
   ```

3. The IndexManager workflow:
   - Updates unit numbers based on document IDs and metadata
   - Identifies relationships between question papers and mark schemes
   - Sorts documents by subject, year, qualification, and unit number
   - Transforms the flat index into a hierarchical structure
   - Enhances the hierarchical structure with metadata from document files

### Exam Content Parsing

The ExamContentParser module processes OCR results from exam papers and mark schemes to extract structured question data.

1. Key features:
   - Extracts questions and their corresponding mark schemes
   - Identifies question numbering and hierarchical structure
   - Associates marks with each question/sub-question
   - Links questions with assessment objectives where available
   - Includes references to media (images, diagrams) in questions
   - Updates the hierarchical index with structured content

2. Command-line options:

   ```
   usage: main.py exam-content [-h] [--index INDEX] [--ocr-results OCR_RESULTS] [--output OUTPUT]
                               [--log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}] [--model MODEL]
                               [--api-key API_KEY] [--logs-dir LOGS_DIR]
                               {test,process,process-single} ...

   options:
     -h, --help            show this help message and exit
     --index INDEX         Path to hierarchical index file (default: Index/hierarchical_index.json)
     --ocr-results OCR_RESULTS
                          Path to OCR results directory (default: ocr_results)
     --output OUTPUT       Path for output questions index file (default: Index/questions_index.json)
     --log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}
                          Set the logging level (default: INFO)
     --model MODEL         Mistral model to use for content parsing (default: mistral-medium)
     --api-key API_KEY     Mistral API key (if not set via MISTRAL_API_KEY environment variable)
     --logs-dir LOGS_DIR   Directory where log files should be saved (optional)

   commands:
     {test,process,process-single}
       test                Test exam content parsing on a specific exam or the first valid exam
       process             Process multiple exams based on criteria
       process-single      Process a single exam by its ID
   ```

3. The ExamContentParser workflow:
   - Loads question paper and mark scheme content from OCR results
   - Uses a sliding window approach to process content in manageable chunks
   - Extracts questions, subquestions, and associated mark schemes
   - Identifies media references and associates them with questions
   - Updates the hierarchical index with the structured question data

### Question Tagging

Process and tag questions in the hierarchical index with specification areas using an LLM.

```bash
python main.py question-tag --index Index/hierarchical_index.json --output Index/hierarchical_index_tagged.json \
    --llm-provider openai --llm-model gpt-4.1-mini --dry-run
```

Options:

- `--index`: Path to hierarchical index file (default: `Index/hierarchical_index.json`)
- `--output`: Path for output tagged index file (default: input filename suffixed with `_tagged.json`)
- `--llm-provider`: LLM provider to use (default: `openai`)
- `--llm-model`: LLM model to use (default: `gpt-4.1-mini`)
- `--dry-run`: Run in dry-run mode (no API calls)
- `--no-validate`: Disable validation of specification tags
- `--verbose`: Enable verbose logging

Python API:

```python
from src.QuestionTagger.question_tagger import QuestionTagger

tagger = QuestionTagger(
    indexPath="Index/hierarchical_index.json",
    llmProvider="openai",
    llmModel="gpt-4",
    dryRun=False,
    outputPath="Index/hierarchical_index_tagged.json",
    validateTags=True
)

tagger.processIndex()
```

## Configuration

The application can be configured by modifying the following variables in `main.py`:

- `source_folder`: The directory containing the source PDF files (default: `./source_pdfs`)
- `destination_folder`: The directory where OCR results will be saved (default: `./ocr_results`)
- The OCR model can be changed by modifying the `model` parameter when initializing `MistralOCRClient`

## Output Format

### OCR Results

The OCR results are saved as JSON files with the following structure:

```json
[
  {
    "page_number": 1,
    "text": "Extracted text content...",
    "images": [
      {
        "image_path": "relative/path/to/image.jpeg",
        "bounding_box": {
          "x0": 100,
          "y0": 200,
          "x1": 300,
          "y1": 400
        }
      }
    ]
  }
]
```

### Index Structure

The index is maintained in two formats:

1. **Flat Index** (`index.json`): Lists all documents with their metadata and relationships.

2. **Hierarchical Index** (`hierarchical_index.json`): Organizes documents by:
   - Subject
   - Year
   - Qualification level
   - Exam unit

   This structure groups related question papers and mark schemes together with exam-level metadata.

3. **Questions Index**: Contains structured question data:
   - Question numbers and text
   - Mark scheme information
   - Mark allocation
   - Associated Assessment Objectives
   - Media file references
   - Hierarchical structure with parent/child relationships for questions and sub-questions

## Error Handling

The application includes comprehensive logging to help diagnose issues:

- Information messages track the processing progress
- Error messages capture exceptions during processing
- Each file is processed independently, so errors with one file won't affect others
- Optional file logging available for exam content parsing operations

## License

[Add your license information here]

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.
