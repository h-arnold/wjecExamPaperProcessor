Metadata-Version: 2.4
Name: wjecexampaperprocessor
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: json-repair>=0.41.0
Requires-Dist: mistralai>=1.6.0
Requires-Dist: pytest>=8.3.5
Requires-Dist: python-dotenv>=1.1.0

# WJEC Exam Paper Processor

## Project Overview

The WJEC Exam Paper Processor is a specialised tool designed to automate the extraction, processing, and analysis of Welsh Joint Education Committee (WJEC) examination papers. This tool helps educators, assessment designers, and educational researchers work more efficiently with exam content by automating metadata extraction and content organization.

## Key Features

- Automated extraction of exam paper metadata (titles, questions, marks, etc.)
- Structured organization of exam content for easier analysis
- Support for various WJEC exam formats across different subject areas
- Tools for comparing exam content across years and specifications
- Export capabilities for further analysis in other systems
- Unified index management system for organizing and relating exam documents
- Hierarchical document structure generation for better content navigation

## Getting Started

### Prerequisites

- Python 3.8 or higher
- Mistral AI API key

### Installation

1. Clone the repository:

   ```bash
   git clone https://github.com/yourusername/examPapersInMarkdown.git
   cd examPapersInMarkdown
   ```

2. Install the required packages:

   ```bash
   pip install mistralai
   ```

3. Set up your Mistral AI API key as an environment variable:

   ```bash
   export MISTRAL_API_KEY="your-api-key"
   ```

   For Windows:

   ```powershell
   set MISTRAL_API_KEY=your-api-key
   ```

4. Create the required directories:

   ```bash
   mkdir -p source_pdfs ocr_results Index
   ```

## Metadata Extraction

The system extracts crucial metadata from WJEC exam papers including:

- Paper code and reference numbers
- Subject and qualification information
- Date and session information
- Question structure and mark allocation
- Content domain coverage

This metadata enables efficient searching, categorisation and analysis of exam papers.

## Usage

### Using the Unified Command Line Interface

The project provides a unified command line interface through `main.py` that serves as a single entry point for all functionality:

```bash
python main.py <command> [options]
```

Available commands:

- `ocr`: Run the OCR processing pipeline
- `metadata`: Extract metadata from OCR results
- `index`: Manage, transform, and enhance the document index

Each command has its own set of options. Use `--help` with any command to see available options:

```bash
python main.py ocr --help
python main.py metadata --help
python main.py index --help
```

#### Examples:

**OCR Processing:**
```bash
python main.py ocr --source /path/to/pdfs --dest /path/to/results --api-key YOUR_MISTRAL_API_KEY
```

**Metadata Extraction:**
```bash
python main.py metadata --file path/to/ocr_file.json --api-key YOUR_MISTRAL_API_KEY
```
or
```bash
python main.py metadata --directory ocr_results --pattern "*.json" --api-key YOUR_MISTRAL_API_KEY
```

**Index Management:**
```bash
python main.py index --input Index/index.json --output Index/hierarchical_index.json
```

### OCR Processing

1. Place your PDF files in the `source_pdfs` directory.

2. Run the main script:

   ```bash
   python src/main.py
   ```

3. The OCR results will be saved in the `ocr_results` directory. For each PDF:
   - A JSON file with the OCR text data
   - An images directory containing extracted images (if any)

### Index Management

The system includes a powerful index management system that organizes exam documents, identifies relationships between question papers and mark schemes, and generates a hierarchical structure for easier navigation.

1. To process and transform your document index in a single step:

   ```bash
   python -m src.IndexManager.main
   ```

2. Command-line options:

   ```
   usage: main.py [-h] [--input INPUT] [--output OUTPUT] [--non-interactive] [--update-only] [--transform-only] [--enhance-only] [--skip-metadata]

   Manage, transform, and enhance exam document index

   options:
     -h, --help         show this help message and exit
     --input INPUT      Path to input flat index file (default: Index/index.json)
     --output OUTPUT    Path for output hierarchical index file (default: Index/hierarchical_index.json)
     --non-interactive  Run in non-interactive mode (automatically select first option for conflicts)
     --update-only      Only update unit numbers and relationships (skip transformation and enhancement)
     --transform-only   Only transform the structure (skip enhancement)
     --enhance-only     Only enhance existing hierarchical structure (skip updating and transformation)
     --skip-metadata    Skip enhancing the structure with document metadata
   ```

3. The IndexManager workflow:
   - Updates unit numbers based on document IDs and metadata
   - Identifies relationships between question papers and mark schemes
   - Sorts documents by subject, year, qualification, and unit number
   - Transforms the flat index into a hierarchical structure
   - Enhances the hierarchical structure with metadata from document files

## Configuration

The application can be configured by modifying the following variables in `main.py`:

- `source_folder`: The directory containing the source PDF files (default: `./source_pdfs`)
- `destination_folder`: The directory where OCR results will be saved (default: `./ocr_results`)
- The OCR model can be changed by modifying the `model` parameter when initializing `MistralOCRClient`

## Output Format

### OCR Results

The OCR results are saved as JSON files with the following structure:

```json
[
  {
    "page_number": 1,
    "text": "Extracted text content...",
    "images": [
      {
        "image_path": "relative/path/to/image.jpeg",
        "bounding_box": {
          "x0": 100,
          "y0": 200,
          "x1": 300,
          "y1": 400
        }
      }
    ]
  }
]
```

### Index Structure

The index is maintained in two formats:

1. **Flat Index** (`index.json`): Lists all documents with their metadata and relationships.

2. **Hierarchical Index** (`hierarchical_index.json`): Organizes documents by:
   - Subject
   - Year
   - Qualification level
   - Exam unit
   
   This structure groups related question papers and mark schemes together with exam-level metadata.

## Error Handling

The application includes comprehensive logging to help diagnose issues:

- Information messages track the processing progress
- Error messages capture exceptions during processing
- Each file is processed independently, so errors with one file won't affect others

## License

[Add your license information here]

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.
